###########################################################################
#                            TextMate Snippets                            #
###########################################################################
# --------------
# Functions
# --------------
global !p
def printf_expand_args(snip):
	"""
	This will look how many placeholders printf has and adds the separated commas
	at the end.
	"""
	
	# now add so many "," as much as the amount of placeholders
	amount_placeholders = snip.tabstops[1].current_text.count("%")

	output = ""

	# Add the amount of tabstops
	for placeholder_index in range(3, amount_placeholders + 3):
		output += f", ${placeholder_index}"
	
	# convert them into tabstops
	snip.expand_anon(output)

endglobal

global !p
def fnp_expand(snip):
    """
    使用说明：
    - 第一个 tabstop (${1}) 输入参数个数（整数）。
    - 展开后 ${2} 为返回类型，${3} 为指针名，
      后续占位按照 ${4:type1} ${5:name1}, ${6:type2} ${7:name2} ... 排列。
    """
    try:
        n = int(snip.tabstops[1].current_text)
        if n < 0: n = 0
    except Exception:
        n = 1

    # 构造注释中参数名占位
    comment_parts = []
    params_parts = []
    for i in range(n):
        type_idx = 4 + i*2
        name_idx = 5 + i*2
        comment_parts.append("${%d:name%d}" % (name_idx, i+1))
        params_parts.append("${%d:type%d} ${%d:name%d}" % (type_idx, i+1, name_idx, i+1))

    comment = "/* " + (", ".join(comment_parts) if comment_parts else "") + " */"
    params = "void" if n == 0 else ", ".join(params_parts)

    # 返回字符串：注意保留第1个占位用于输入参数个数
    snippet_body = "\n" + comment + "\n${2:type} (*${3:name}) (" + params + ");"
    snip.expand_anon(snippet_body)
endglobal

# ==============
# Snippets 
# ==============
priority 500

snippet def "#define ..."
#define $1
endsnippet

snippet #if "#if #endif" b
#if ${1:0}
	${VISUAL}$0
#endif
endsnippet

snippet mark "#pragma mark (mark)"
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet

snippet mn "main() (main)"
#include <stdio.h>

int main(int argc, char *argv[]) {

	${VISUAL}$0

	return 0;
}
endsnippet

# snippet once "Include header once only guard"
# #ifndef ${1:`!p
# if not snip.c:
# 	import random, string
# 	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
# 	rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
# 	snip.rv = ('%s_%s' % (name,rand)).upper()
# else:
# 	snip.rv = snip.c`}
# #define $1
# 
# ${VISUAL}$0
# 
# #endif /* end of include guard: $1 */
# endsnippet

snippet once "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
    name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
    snip.rv = ('%s' % name).upper()
else:
    snip.rv = snip.c`}
#define $1

${VISUAL}$0

#endif /* end of include guard: $1 */
endsnippet

snippet fprintf "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet eli "else if .. (eli)"
else if (${1:/* condition */}) {
	${VISUAL}$0
}
endsnippet

post_jump "printf_expand_args(snip)"
snippet sf 
	scanf("%$1"$2);
endsnippet

post_jump "printf_expand_args(snip)"
snippet pri "printf with auto-expand args" wr
	printf("$1\n"$2);
endsnippet

snippet st "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`} {
	${0:/* data */}
};
endsnippet

snippet fun "function" b
${1:void} ${2:function_name}($3) {
	${VISUAL}$0
}
endsnippet

snippet fnd "function declaration" b
${1:void} ${2:function_name}($3);
endsnippet

global !p
def split_line(text):
	import textwrap
	lines = textwrap.wrap(text, 78 - 19)
	output = list()
	for line in lines:
		output.append('*' + ' '*19 + line)
	snip_line = snip.tabstops[4].end[0]
	snip.buffer.append(output, snip_line + 1)
	del snip.buffer[snip_line]

def get_args(arglist):
	args = [arg.strip() for arg in arglist.split(',') if arg]
	return args
endglobal

post_jump "if snip.tabstop == 0 : split_line(snip.tabstops[4].current_text)"
snippet head "File Header" b
/******************************************************************************
* File:             `!p snip.rv = fn`
*
* Author:           ${2}  
* Created:          `date +%m/%d/%y` 
* Description:      ${4:${VISUAL}}
*****************************************************************************/
${0}
endsnippet

post_jump "if snip.tabstop == 0 : split_line(snip.tabstops[4].current_text)"
snippet func "Function Header" 
/******************************************************************************
* Function:         $1
* Description:      ${4:${VISUAL}}
* Where:`!p 
snip.rv = ""
snip >> 2

args = get_args(t[2])
if args:
	for arg in args:
		snip.rv += '\n' + '*' + ' '*19 + arg + ' - TODO'
snip << 2
`
* Return:           $5
* Error:            $6
*****************************************************************************/
${1}($2){
	${0}
}
endsnippet

# #include <...>
snippet inc
#include <${1:stdio}.h>
endsnippet

# #include "..."
snippet Inc
#include "${1:`!p snip.rv = (snip.basename or "name") + ".h"`}"
endsnippet

# ifdef...endif
snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif
endsnippet

# if
snippet #if
	#if ${1:FOO}
		${0:${VISUAL}}
	#endif
endsnippet

# Disable C++ name mangling in C headers
snippet nocxx
	#ifdef __cplusplus
	extern "C" {
	#endif

	${0}

	#ifdef __cplusplus
	}
	#endif
endsnippet

##
## Control Statements
snippet ife
	if (${1:expression}) {
		${2:${VISUAL}}
	} else {
		${0}
	}
endsnippet

snippet el
	else {
		${0:${VISUAL}}
	}
endsnippet

# else if
snippet elif
	else if (${1:expression}) {
		${0:${VISUAL}}
	}
endsnippet

# ifi
snippet ifi
	if (${1:expression}) ${0};
endsnippet

# ternary
snippet t "Ternary: `condition ? true : false`"
	$1 ? $2 : $0
endsnippet

# switch
snippet switch
	switch (${1:/* variable */}) {
		case ${2:/* variable case */}:
			${3}
			${4:break;}${5}
		default:
			${6}
			break;
	}
endsnippet

# switch without default
snippet switchndef
	switch (${1:/* variable */}) {
		case ${2:/* variable case */}:
			${3}
			${4:break;}${5}
	}
endsnippet

# case
snippet case
	case ${1:/* variable case */}:
		${2}
		break;${3}
endsnippet

snippet ret
	return ${0};
endsnippet

snippet ex
	exit($0);
endsnippet

##
## Loops
# for
snippet for "reserve: int, = 0, <"
	for (int ${2:i} = 0; $2 < ${1:count}; ${3:++}$2) {
		${4}
	}
endsnippet

# for (custom)
snippet fori "reserve: int"
	for (int ${1:i} = ${2:0}; ${3:$1 < 10}; ${4:++}$1) {
		${5}
	}
endsnippet

snippet fora "reserve: = 0, <"
for (${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}$0
}
endsnippet

snippet forr "reserve: = 0"
for (${4:int} ${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}$0
}
endsnippet

# while
snippet wh
	while (${1:1}) {
		${0:${VISUAL}}
	}
endsnippet

snippet wht
	while (true) {
		${0:${VISUAL}}
	}
endsnippet

# do... while
snippet do
	do {
		${0:${VISUAL}}
	} while ($1);
endsnippet

##
## Functions
# function definition with zero parameters
snippet fn0
${1:void} ${2:function_name}() {
	${3}
}
endsnippet

# function definition with Doxygen documentation
snippet dfn0
${4:void} ${5:function_name}() {
	${6}
}
endsnippet

# function definition with one parameter
snippet fn1
${1:void} ${2:function_name}(${3:Type} ${4:Parameter}) {
	${5}
}
endsnippet

# function definition with one parameter with  Doxygen documentation
snippet dfn1
${6:void} ${7:function_name}(${8:Type} ${3:Parameter}) {
	${9}
}
endsnippet

# function definition with two parameters
snippet fn2
${1:void} ${2:function_name}(${3:Type} ${4:Parameter}, ${5:Type} ${6:Parameter}) {
	${7}
}
endsnippet

# function definition with two parameters with  Doxygen documentation
snippet dfn2
${8:void} ${9:function_name}(${10:Type} ${3:Parameter}, ${11:Type} ${5:Parameter}) {
	${12}
}
endsnippet

# function definition with three parameters
snippet fn3
${1:void} ${2:function_name}(${3:Type} ${4:Parameter}, ${5:Type} ${6:Parameter}, ${7:Type} ${8:Parameter}) {
	${9}
}
endsnippet

# function definition with three parameters with  Doxygen documentation
snippet dfn3
${10:void} ${11:function_name}(${12:Type} ${3:Parameter}, ${13:Type} ${5:Parameter}, ${14:Type} ${7:Parameter}) {
	${15}
}
endsnippet

##
## Types
# typedef
snippet tp
typedef ${1:int} ${2:MyCustomType};
endsnippet

# typedef struct
snippet tps
typedef struct ${1:name} $1;
endsnippet

snippet tpsa
typedef struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`} { 
	${2:Data}
} ${1};
endsnippet

# typedef struct
snippet tpa
typedef struct { 
	${2:Data}
} ${1};
endsnippet

# enum
snippet enum
	enum ${1:name} { ${0} };
endsnippet

# typedef enum
snippet tpe
typedef enum {
	${1:Data} 
} ${2:foo};
endsnippet

#  typedef type (*) (type,type)
snippet tpp "typedef ptrFunction" 
typedef ${1:type} (*${2:name})(${3:type});
endsnippet

# type (*) (type,type)
snippet fcptr "ptrFunction" 
/*$1 (*$2) ($3 ${5:name}) = $4*/
${1:type} (*${2:name})(${3:type}) = ${4:Val};
endsnippet


# type (*) (type,type)
snippet fnp0 "parameter is void" 
${1:type} (*${2:name})(void);
endsnippet

snippet fnp1 "Two parameters" 
/* $3${5: name} */
${1:type} (*${2:name})(${3:type});
endsnippet

snippet fnp2 "Two parameters" 
/* $3${6: name}, $4${7: name} */
${1:type} (*${2:name})(${3:type}, ${4:type});
endsnippet

snippet fnp3 "There parameters" 
/* $3${6: name}, $4${7: name}, $4${8: name} */
${1:type} (*${2:name})(${3:type}, ${4:type}, ${5:type});
endsnippet

##
## Input/Output
snippet prd
	printf("${1:} = %d\n", $1);
endsnippet

snippet prp
	printf("${1:} = %p\n", (void*)$1);
endsnippet

snippet prf
snippet prf
	printf("${1:} = %.2f\n", $1);
endsnippet

snippet prx
	printf("${1:} = %${2}\n", $1);
endsnippet

snippet ptr
	*ptr_${1:} = &$1;
endsnippet

snippet warn
	warn("${1:%s}"$0);
endsnippet

snippet warnx
	warnx("${1:%s}"$0);
endsnippet

snippet err
	err(${1:1}, "${2:%s}"$0);
endsnippet

snippet errx
	errx(${1:1}, "${2:%s}"$0);
endsnippet

# getopt
snippet getopt
	int choice;
	while (1)
	{
		static struct option long_options[] =
		{
			{"version", no_argument,	0,	'v'},
			{"help",	no_argument,	0,	'h'},
			${1}
			{0,0,0,0}
		};

		int option_index = 0;

		choice = getopt_long( argc, argv, "vh",
					long_options, &option_index);

		if (choice == -1)
			break;

		switch( choice )
		{
			case 'v':
				${2}
				break;

			case 'h':
				${3}
				break;

			case '?':
				break;

			default:
				return EXIT_FAILURE;
		}
	}

	if ( optind < argc )
	{
		while ( optind < argc )
		{
			${0}
		}
	}

endsnippet

## Assertions
snippet asr
	assert($1);
endsnippet

snippet anl
	assert(${1:ptr *} != NULL);
endsnippet

snippet nul
	NULL
endsnippet

snippet mset
	memset(${1:ptr *}, 0, ${2:size} * sizeof(${3:type}));
endsnippet

snippet mse
	memset(${1:ptr *}, 0, sizeof(${2:type}));
endsnippet

snippet mcpy
	memcpy(${1:ptr *}, ${2:const ptr *}, ${3:size} * sizeof(${4:type}));
endsnippet

snippet mcp
	memcpy(${1:ptr *}, ${2:const ptr *}, sizeof(${3:type}));
endsnippet

snippet mmove
	memmove(${1:ptr *}, ${2:const ptr *}, ${3:size} * sizeof(${4:type}));
endsnippet

snippet mmov
	memmove(${1:ptr *}, ${2:const ptr *},sizeof(${3:type}));
endsnippet

snippet mcmp
	memcmp(${1:const ptr *}, ${2:const ptr *}, ${3:size} * sizeof(${4:type}));
endsnippet

snippet mcm
	memcmp(${1:const ptr *}, ${2:const ptr *},sizeof(${3:type}));
endsnippet

## Dynamic Allocation
snippet ma "reserve: "
	${1:ptr *} = (${2:type}*) malloc( sizeof($2));
endsnippet

snippet mai "reserve: if"
	${1:ptr *} = (${2:type}*) malloc( sizeof($2));
	if ($1 == NULL) {
		perror("The memory allocation for ${1:name} failed\n");
		return ${3:-1};
	}
endsnippet

snippet mat "reserve: test_assert_not_null()"
	${1:ptr *} = (${2:type}*) malloc( sizeof($2));
	TEST_ASSERT_NOT_NULL($1);
endsnippet

snippet mal "reserve: type"
	${1:type} ${2:ptr *} = ($1*) malloc(sizeof($1));
endsnippet

snippet mali "reserve: type, if"
	${1:type} *${2:ptr *} = ($1*) malloc(sizeof($1));
	if ($2 == NULL) {
		perror("The memory allocation for ${2:name} failed\n");
		return ${3:-1};
	}
endsnippet

snippet malt "reserve: type, if"
	${1:type} *${2:ptr *} = ($1*) malloc(sizeof($1));
	TEST_ASSERT_NOT_NULL($2);
endsnippet

snippet mall "reserve: size"
	${1:ptr *} = (${2:type}*) malloc(${3:size} * sizeof($2));
endsnippet

snippet malli "reserve: size, if"
	${1:ptr *} = (${2:type}*) malloc(${3:size} * sizeof($2));
	if ($1 == NULL) {
		perror("The memory allocation for ${1:name} failed\n");
		return ${3:-1};
	}
endsnippet

snippet call
	${1:ptr *} = (${2:type}*) calloc(${3:size} * sizeof($2));
endsnippet

snippet real
	${1:ptr *} = realloc($1, ${2:size} * sizeof(${3:type}));
endsnippet

snippet cal
	${1:type} ${2:ptr *} = ($1*) calloc(${3:size} * sizeof($1));
endsnippet

snippet fre
	free(${1:ptr *});
endsnippet

snippet free "add ptr* = NULL"
	free(${1:ptr *});
	$1 = NULL;
endsnippet
##
# TODO section
snippet todo
	/*! TODO: ${1:Todo description here}
	*  \todo $1
	*/
endsnippet

## Miscellaneous
# This is kind of convenient
snippet .
	[${1}]
endsnippet

snippet asm
	__asm__ __volatile__(
	"${0}\n\t"
	:
	:
	);
endsnippet

snippet fgets
	fgets(${1:ptr *},sizeof($1),${2:fptr *})
endsnippet

snippet run
${1:void} ${2:function_name}($3);
	RUN_TEST(${2});
endsnippet

snippet test
#include "/home/i/tools/Unity/src/unity.h"
#include "${0:`!p
name = snip.basename or "name"
if name.startswith("test_"):
    name = name[5:]
if name.endswith(".c"):
    name = name[:-2]
snip.rv = name + ".h"
`}"

void setUp() {}

void tearDown() {}

${1:void} ${2:function_name}($3);

int main(int argc, char *argv[]) {

	UNITY_BEGIN();

	RUN_TEST(${2});

	return UnityEnd();
}
endsnippet
