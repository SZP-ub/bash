---@diagnostic disable: undefined-global
return {
	-- =========================
	-- mason.nvim：只负责 LSP server 安装
	-- =========================
	{
		"mason-org/mason.nvim",
		opts = {
			ui = {
				border = "rounded",
				width = 0.8,
				height = 0.7,
				icons = {
					package_installed = "✓",
					package_pending = "➜",
					package_uninstalled = "✗",
				},
			},
		},
		config = function(_, opts)
			require("mason").setup(opts)
		end,
	},

	-- =========================
	-- mason-lspconfig：只负责 LSP server 自动安装与配置
	-- =========================
	{
		"mason-org/mason-lspconfig.nvim",
		dependencies = {
			{ "mason-org/mason.nvim", opts = {} },
			"neovim/nvim-lspconfig",
			"saghen/blink.cmp",
		},
		opts = {
			ensure_installed = { "clangd", "marksman" },
			automatic_installation = true,
		},
		config = function(_, opts)
			require("mason-lspconfig").setup(opts)

			local capabilities = vim.tbl_deep_extend(
				"force",
				vim.lsp.protocol.make_client_capabilities(),
				require("blink.cmp").get_lsp_capabilities and require("blink.cmp").get_lsp_capabilities() or {}
			)

			local function lsp_on_attach(client, bufnr)
				local opts = { buffer = bufnr, silent = true }
				vim.keymap.set("n", "[g", vim.diagnostic.goto_prev, opts)
				vim.keymap.set("n", "]g", vim.diagnostic.goto_next, opts)
				vim.keymap.set("n", "gd", vim.lsp.buf.definition, opts)
				vim.keymap.set("n", "gy", vim.lsp.buf.type_definition, opts)
				vim.keymap.set("n", "gi", vim.lsp.buf.implementation, opts)
				vim.keymap.set("n", "gr", vim.lsp.buf.references, opts)
				vim.keymap.set("n", "K", vim.lsp.buf.hover, opts)
				vim.keymap.set("n", "<leader>rn", vim.lsp.buf.rename, opts)
				vim.keymap.set("n", "<leader>a", vim.lsp.buf.code_action, opts)
				vim.keymap.set("x", "<leader>a", vim.lsp.buf.code_action, opts)
				vim.keymap.set("n", "<leader>ac", function()
					vim.lsp.buf.code_action({ context = { only = { "quickfix" } } })
				end, opts)
				vim.keymap.set("n", "<leader>as", function()
					vim.lsp.buf.code_action({ context = { only = { "source" } } })
				end, opts)
				vim.keymap.set("n", "<leader>qf", function()
					vim.lsp.buf.code_action({ context = { only = { "quickfix" } } })
				end, opts)
				vim.keymap.set("n", "<leader>re", function()
					vim.lsp.buf.code_action({ context = { only = { "refactor" } } })
				end, opts)
				vim.keymap.set("x", "<leader>r", function()
					vim.lsp.buf.code_action({ context = { only = { "refactor" } } })
				end, opts)
				vim.keymap.set("n", "<leader>r", function()
					vim.lsp.buf.code_action({ context = { only = { "refactor" } } })
				end, opts)
				vim.keymap.set("n", "<leader>cl", vim.lsp.codelens.run, opts)
				vim.api.nvim_create_autocmd("BufWritePre", {
					buffer = bufnr,
					callback = function()
						vim.lsp.buf.format({ async = false })
					end,
				})
				if
					client
					and client.supports_method(vim.lsp.protocol.Methods.textDocument_documentHighlight)
					and vim.bo.filetype ~= "bigfile"
				then
					local highlight_augroup = vim.api.nvim_create_augroup("kickstart-lsp-highlight", { clear = false })
					vim.api.nvim_create_autocmd({ "CursorHold", "CursorHoldI" }, {
						buffer = bufnr,
						group = highlight_augroup,
						callback = vim.lsp.buf.document_highlight,
					})
					vim.api.nvim_create_autocmd({ "CursorMoved", "CursorMovedI" }, {
						buffer = bufnr,
						group = highlight_augroup,
						callback = vim.lsp.buf.clear_references,
					})
					vim.api.nvim_create_autocmd("LspDetach", {
						group = vim.api.nvim_create_augroup("kickstart-lsp-detach", { clear = true }),
						callback = function(event2)
							vim.lsp.buf.clear_references()
							vim.api.nvim_clear_autocmds({ group = "kickstart-lsp-highlight", buffer = event2.buf })
						end,
					})
				end

				if client.name == "clangd" then
					vim.api.nvim_buf_create_user_command(bufnr, "LspClangdSwitchSourceHeader", function()
						if switch_source_header then
							switch_source_header(bufnr, client)
						end
					end, { desc = "Switch between source/header" })
					vim.api.nvim_buf_create_user_command(bufnr, "LspClangdShowSymbolInfo", function()
						if symbol_info then
							symbol_info(bufnr, client)
						end
					end, { desc = "Show symbol info" })
				end
			end

			-- Neovim 0.11+ 推荐用 vim.lsp.config
			vim.lsp.config("clangd", {
				cmd = { "clangd" },
				filetypes = { "c", "cpp", "objc", "objcpp", "cuda" },
				root_dir = {
					".clangd",
					".clang-tidy",
					".clang-format",
					"compile_commands.json",
					"compile_flags.txt",
					"configure.ac",
					".git",
				},
				capabilities = vim.tbl_deep_extend("force", capabilities, {
					textDocument = { completion = { editsNearCursor = true } },
					offsetEncoding = { "utf-8", "utf-16" },
				}),
				on_init = function(client, init_result)
					if init_result.offsetEncoding then
						client.offset_encoding = init_result.offsetEncoding
					end
				end,
				on_attach = lsp_on_attach,
			})

			vim.lsp.config("marksman", {
				capabilities = capabilities,
				on_attach = lsp_on_attach,
			})
		end,
	},

	-- =========================
	-- blink.cmp 补全
	-- =========================
	{
		"saghen/blink.cmp",
		version = "1.*",
		dependencies = {
			"L3MON4D3/LuaSnip",
		},
		opts = {
			fuzzy = {
				implementation = "lua",
			},
			cmdline = {
				keymap = {
					["<CR>"] = { "select_and_accept", "fallback" },
				},
			},
			completion = {
				menu = {
					auto_show = true,
				},
				ghost_text = { enabled = false },
				keyword = { range = "full" },
				documentation = { auto_show = true, auto_show_delay_ms = 0 },
			},
			keymap = {
				preset = "none",
				["<C-space>"] = { "show", "show_documentation", "hide_documentation" },
				["<CR>"] = { "accept", "fallback" },
				["<Tab>"] = { "select_next", "snippet_forward", "fallback" },
				["<S-Tab>"] = { "select_prev", "snippet_backward", "fallback" },
				["<C-b>"] = { "scroll_documentation_up", "fallback" },
				["<C-f>"] = { "scroll_documentation_down", "fallback" },
			},
			enabled = function()
				return vim.bo.buftype == "" or vim.bo.buftype == "acwrite"
			end,
			appearance = {
				use_nvim_cmp_as_default = true,
				nerd_font_variant = "mono",
			},
			sources = {
				default = {
					"buffer",
					"lsp",
					"path",
					"snippets",
				},
				providers = {
					buffer = { score_offset = 3 },
					path = { score_offset = 2 },
					lsp = { score_offset = 2 },
					snippets = { score_offset = 4, min_keyword_length = 1 },
					cmdline = {
						min_keyword_length = function(ctx)
							if ctx.mode == "cmdline" and string.find(ctx.line, " ") == nil then
								return 2
							end
							return 0
						end,
					},
				},
			},
		},
		config = function(_, opts)
			require("blink.cmp").setup(opts)
			require("luasnip.loaders.from_lua").lazy_load({
				paths = { vim.fn.stdpath("config") .. "/luasnip" },
			})
		end,
	},

	-- =========================
	-- nvim-lspconfig：全局配置和诊断
	-- =========================
	{
		"neovim/nvim-lspconfig",
		dependencies = {
			"saghen/blink.cmp",
			"L3MON4D3/LuaSnip",
			"nvim-treesitter/nvim-treesitter-textobjects",
			"mason-org/mason.nvim",
			"mason-org/mason-lspconfig.nvim",
		},
		config = function()
			vim.lsp.handlers["textDocument/hover"] = vim.lsp.with(vim.lsp.handlers.hover, { border = "rounded" })
			vim.diagnostic.config({
				underline = false,
				signs = false,
				update_in_insert = false,
				virtual_text = { spacing = 2, prefix = "●" },
				severity_sort = true,
				float = { border = "rounded" },
			})
			vim.api.nvim_create_user_command("Fold", function(opts)
				vim.lsp.buf.range_code_action({ only = { "source.organizeImports" } })
			end, { nargs = "?" })
			vim.api.nvim_create_user_command("OR", function()
				vim.lsp.buf.code_action({ context = { only = { "source.organizeImports" } } })
			end, {})
		end,
	},

	-- =========================
	-- treesitter textobjects：代码结构对象选择与跳转
	-- =========================
	{
		"nvim-treesitter/nvim-treesitter-textobjects",
		dependencies = {},
		config = function()
			require("nvim-treesitter.configs").setup({
				textobjects = {
					select = {
						enable = true,
						lookahead = true,
						keymaps = {
							["af"] = "@function.outer",
							["if"] = "@function.inner",
							["ac"] = "@class.outer",
							["ic"] = "@class.inner",
						},
					},
					move = {
						enable = true,
						set_jumps = true,
						goto_next_start = { ["]f"] = "@function.outer", ["]c"] = "@class.outer" },
						goto_previous_start = { ["[f"] = "@function.outer", ["[c"] = "@class.outer" },
					},
				},
			})
		end,
	},
}
